@app.route('/Map/Create', methods=['POST'])
def create_map():
    try:
        data = request.json
        ten_map = data.get('TenMap')
        trang_thai = data.get('TrangThai', 1)

        if not ten_map:
            return jsonify({'error': 'Tên map là bắt buộc'}), 400

        cursor = con.cursor()
        
        # Kiểm tra tên map đã tồn tại
        cursor.execute("SELECT COUNT(*) FROM Map WHERE TenMap = ?", (ten_map,))
        count = cursor.fetchone()[0]
        if count > 0:
            return jsonify({'error': 'Tên map đã tồn tại'}), 400

        # Thêm map mới
        query = """
            INSERT INTO Map (TenMap, TrangThai)
            VALUES (?, ?)
        """
        cursor.execute(query, (ten_map, trang_thai))
        con.commit()
        cursor.close()

        return jsonify({'message': 'Tạo map thành công'}), 201
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/Map/Update/<int:id_map>', methods=['PUT'])
def update_map(id_map):
    try:
        data = request.json
        ten_map = data.get('TenMap')
        trang_thai = data.get('TrangThai', 1)

        if not ten_map:
            return jsonify({'error': 'Tên map là bắt buộc'}), 400

        cursor = con.cursor()
        
        # Kiểm tra map có tồn tại không
        cursor.execute("SELECT COUNT(*) FROM Map WHERE IdMap = ?", (id_map,))
        count = cursor.fetchone()[0]
        if count == 0:
            return jsonify({'error': 'Map không tồn tại'}), 404

        # Kiểm tra tên map đã tồn tại (trừ chính nó)
        cursor.execute("SELECT COUNT(*) FROM Map WHERE TenMap = ? AND IdMap != ?", 
                      (ten_map, id_map))
        count = cursor.fetchone()[0]
        if count > 0:
            return jsonify({'error': 'Tên map đã tồn tại'}), 400

        # Cập nhật thông tin
        query = """
            UPDATE Map 
            SET TenMap = ?, TrangThai = ?
            WHERE IdMap = ?
        """
        cursor.execute(query, (ten_map, trang_thai, id_map))
        con.commit()
        cursor.close()
        
        return jsonify({'message': 'Cập nhật map thành công'}), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/Map/Delete/<int:id_map>', methods=['DELETE'])
def delete_map(id_map):
    try:
        cursor = con.cursor()
        
        # Kiểm tra map có tồn tại không
        cursor.execute("SELECT COUNT(*) FROM Map WHERE IdMap = ?", (id_map,))
        count = cursor.fetchone()[0]
        if count == 0:
            return jsonify({'error': 'Map không tồn tại'}), 404

        # Xóa map (soft delete)
        cursor.execute("UPDATE Map SET TrangThai = 0 WHERE IdMap = ?", (id_map,))
        con.commit()
        cursor.close()
        
        return jsonify({'message': 'Xóa map thành công'}), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500
    
    
    
    @app.route('/BangXepHang/Create', methods=['POST'])
def create_bang_xep_hang():
    try:
        data = request.json
        id_giai = data.get('IdGiai')
        id_team = data.get('IdTeam')
        tran_da = data.get('TranDa', 0)
        tran_thang = data.get('TranThang', 0)
        tran_thua = data.get('TranThua', 0)
        map_thang = data.get('MapThang', 0)
        map_thua = data.get('MapThua', 0)
        diem = data.get('Diem', 0)
        hang_hien_tai = data.get('HangHienTai', 0)

        if not id_giai or not id_team:
            return jsonify({'error': 'ID giải đấu và ID team là bắt buộc'}), 400

        cursor = con.cursor()
        
        # Kiểm tra giải đấu có tồn tại không
        cursor.execute("SELECT COUNT(*) FROM GiaiDau WHERE IdGiai = ?", (id_giai,))
        count = cursor.fetchone()[0]
        if count == 0:
            return jsonify({'error': 'Giải đấu không tồn tại'}), 400

        # Kiểm tra team có tồn tại không
        cursor.execute("SELECT COUNT(*) FROM Team WHERE IdTeam = ?", (id_team,))
        count = cursor.fetchone()[0]
        if count == 0:
            return jsonify({'error': 'Team không tồn tại'}), 400

        # Kiểm tra team đã có trong bảng xếp hạng của giải này chưa
        cursor.execute("SELECT COUNT(*) FROM BangXepHang WHERE IdGiai = ? AND IdTeam = ?", 
                      (id_giai, id_team))
        count = cursor.fetchone()[0]
        if count > 0:
            return jsonify({'error': 'Team đã có trong bảng xếp hạng của giải này'}), 400

        # Thêm bảng xếp hạng mới
        query = """
            INSERT INTO BangXepHang (IdGiai, IdTeam, TranDa, TranThang, TranThua, 
                                   MapThang, MapThua, Diem, HangHienTai)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        """
        cursor.execute(query, (id_giai, id_team, tran_da, tran_thang, tran_thua,
                              map_thang, map_thua, diem, hang_hien_tai))
        con.commit()
        cursor.close()

        return jsonify({'message': 'Tạo bảng xếp hạng thành công'}), 201
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/BangXepHang/Update/<int:id_xh>', methods=['PUT'])
def update_bang_xep_hang(id_xh):
    try:
        data = request.json
        tran_da = data.get('TranDa', 0)
        tran_thang = data.get('TranThang', 0)
        tran_thua = data.get('TranThua', 0)
        map_thang = data.get('MapThang', 0)
        map_thua = data.get('MapThua', 0)
        diem = data.get('Diem', 0)
        hang_hien_tai = data.get('HangHienTai', 0)

        cursor = con.cursor()
        
        # Kiểm tra bảng xếp hạng có tồn tại không
        cursor.execute("SELECT COUNT(*) FROM BangXepHang WHERE IdXH = ?", (id_xh,))
        count = cursor.fetchone()[0]
        if count == 0:
            return jsonify({'error': 'Bảng xếp hạng không tồn tại'}), 404

        # Cập nhật thông tin
        query = """
            UPDATE BangXepHang 
            SET TranDa = ?, TranThang = ?, TranThua = ?, MapThang = ?, 
                MapThua = ?, Diem = ?, HangHienTai = ?
            WHERE IdXH = ?
        """
        cursor.execute(query, (tran_da, tran_thang, tran_thua, map_thang,
                              map_thua, diem, hang_hien_tai, id_xh))
        con.commit()
        cursor.close()
        
        return jsonify({'message': 'Cập nhật bảng xếp hạng thành công'}), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/BangXepHang/Delete/<int:id_xh>', methods=['DELETE'])
def delete_bang_xep_hang(id_xh):
    try:
        cursor = con.cursor()
        
        # Kiểm tra bảng xếp hạng có tồn tại không
        cursor.execute("SELECT COUNT(*) FROM BangXepHang WHERE IdXH = ?", (id_xh,))
        count = cursor.fetchone()[0]
        if count == 0:
            return jsonify({'error': 'Bảng xếp hạng không tồn tại'}), 404

        # Xóa bảng xếp hạng
        cursor.execute("DELETE FROM BangXepHang WHERE IdXH = ?", (id_xh,))
        con.commit()
        cursor.close()
        
        return jsonify({'message': 'Xóa bảng xếp hạng thành công'}), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/BangXepHang/UpdateFromMatches/<int:id_giai>', methods=['PUT'])
def update_bang_xep_hang_from_matches(id_giai):
    """Cập nhật bảng xếp hạng dựa trên kết quả trận đấu"""
    try:
        cursor = con.cursor()
        
        # Kiểm tra giải đấu có tồn tại không
        cursor.execute("SELECT COUNT(*) FROM GiaiDau WHERE IdGiai = ?", (id_giai,))
        count = cursor.fetchone()[0]
        if count == 0:
            return jsonify({'error': 'Giải đấu không tồn tại'}), 404

        # Lấy tất cả team trong giải
        cursor.execute("SELECT IdTeam FROM Team WHERE IdGiai = ?", (id_giai,))
        teams = cursor.fetchall()

        for team in teams:
            id_team = team.IdTeam
            
            # Tính toán thống kê từ trận đấu
            cursor.execute("""
                SELECT 
                    COUNT(*) as TranDa,
                    SUM(CASE WHEN TeamThang = ? THEN 1 ELSE 0 END) as TranThang,
                    SUM(CASE WHEN TeamThang != ? AND TeamThang IS NOT NULL THEN 1 ELSE 0 END) as TranThua,
                    SUM(CASE WHEN Team1 = ? THEN TiSoTeam1 ELSE TiSoTeam2 END) as MapThang,
                    SUM(CASE WHEN Team1 = ? THEN TiSoTeam2 ELSE TiSoTeam1 END) as MapThua
                FROM TranDau 
                WHERE IdGiai = ? AND (Team1 = ? OR Team2 = ?) AND TrangThai = 'Đã kết thúc'
            """, (id_team, id_team, id_team, id_team, id_giai, id_team, id_team))
            
            stats = cursor.fetchone()
            tran_da = stats.TranDa if stats.TranDa else 0
            tran_thang = stats.TranThang if stats.TranThang else 0
            tran_thua = stats.TranThua if stats.TranThua else 0
            map_thang = stats.MapThang if stats.MapThang else 0
            map_thua = stats.MapThua if stats.MapThua else 0
            
            # Tính điểm (3 điểm thắng, 0 điểm thua)
            diem = tran_thang * 3

            # Kiểm tra team đã có trong bảng xếp hạng chưa
            cursor.execute("SELECT COUNT(*) FROM BangXepHang WHERE IdGiai = ? AND IdTeam = ?", 
                          (id_giai, id_team))
            exists = cursor.fetchone()[0]

            if exists > 0:
                # Cập nhật
                cursor.execute("""
                    UPDATE BangXepHang 
                    SET TranDa = ?, TranThang = ?, TranThua = ?, MapThang = ?, 
                        MapThua = ?, Diem = ?
                    WHERE IdGiai = ? AND IdTeam = ?
                """, (tran_da, tran_thang, tran_thua, map_thang, map_thua, diem, id_giai, id_team))
            else:
                # Thêm mới
                cursor.execute("""
                    INSERT INTO BangXepHang (IdGiai, IdTeam, TranDa, TranThang, TranThua, 
                                           MapThang, MapThua, Diem, HangHienTai)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, 0)
                """, (id_giai, id_team, tran_da, tran_thang, tran_thua, map_thang, map_thua, diem))

        # Cập nhật hạng hiện tại
        cursor.execute("""
            WITH RankedTeams AS (
                SELECT IdXH, ROW_NUMBER() OVER (ORDER BY Diem DESC, MapThang DESC) as NewRank
                FROM BangXepHang
                WHERE IdGiai = ?
            )
            UPDATE BangXepHang 
            SET HangHienTai = (SELECT NewRank FROM RankedTeams WHERE RankedTeams.IdXH = BangXepHang.IdXH)
            WHERE IdGiai = ?
        """, (id_giai, id_giai))

        con.commit()
        cursor.close()
        
        return jsonify({'message': 'Cập nhật bảng xếp hạng từ trận đấu thành công'}), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/BangXepHang/InitializeForTournament/<int:id_giai>', methods=['POST'])
def initialize_bang_xep_hang_for_tournament(id_giai):
    """Khởi tạo bảng xếp hạng cho tất cả team trong giải đấu"""
    try:
        cursor = con.cursor()
        
        # Kiểm tra giải đấu có tồn tại không
        cursor.execute("SELECT COUNT(*) FROM GiaiDau WHERE IdGiai = ?", (id_giai,))
        count = cursor.fetchone()[0]
        if count == 0:
            return jsonify({'error': 'Giải đấu không tồn tại'}), 404

        # Lấy tất cả team trong giải
        cursor.execute("SELECT IdTeam FROM Team WHERE IdGiai = ?", (id_giai,))
        teams = cursor.fetchall()

        if not teams:
            return jsonify({'error': 'Không có team nào trong giải đấu này'}), 400

        # Xóa bảng xếp hạng cũ (nếu có)
        cursor.execute("DELETE FROM BangXepHang WHERE IdGiai = ?", (id_giai,))

        # Thêm tất cả team vào bảng xếp hạng với giá trị mặc định
        for i, team in enumerate(teams):
            cursor.execute("""
                INSERT INTO BangXepHang (IdGiai, IdTeam, TranDa, TranThang, TranThua, 
                                       MapThang, MapThua, Diem, HangHienTai)
                VALUES (?, ?, 0, 0, 0, 0, 0, 0, ?)
            """, (id_giai, team.IdTeam, i + 1))

        con.commit()
        cursor.close()
        
        return jsonify({'message': f'Khởi tạo bảng xếp hạng cho {len(teams)} team thành công'}), 201
    except Exception as e:
        return jsonify({'error': str(e)}), 500